name: zkVerify E2E Tests

inputs:
  zkverify_docker_tag:
    description: "Docker image tag for zkverify"
    type: string
  zkverify_version:
    description: "Commit hash or tag for zkVerify repository"
    type: string
  attestation_bot_branch:
    description: "Branch for attestation bot"
    required: false
    type: string
    default: "main"
  zkv_contracts_branch:
    description: "Branch for zkv attestation contracts"
    required: false
    type: string
    default: "main"
  DOCKER_HUB_USERNAME:
    required: true
  DOCKER_HUB_TOKEN:
    required: true
  GH_TOKEN:
    required: true
  QA_SLACK_WEBHOOK_URL:
    required: true

outputs:
  test_status: 
    value: ${{ steps.parse_test_results.outputs.test_status }}

env:
  NODE_VERSION: "20"

runs:
  using: "composite"

  steps:
    - name: Check that only one input is provided for a zkVerify version
      shell: bash
      run: |
        if [ "${{ inputs.zkverify_docker_tag }}" != "" ] && [ "${{ inputs.zkverify_version }}" != "" ]; then
          echo "Error: Both zkverify_docker_tag and zkverify_version cannot be provided."
          exit 1
        elif [ "${{ inputs.zkverify_docker_tag }}" == "" ] && [ "${{ inputs.zkverify_version }}" == "" ]; then
          echo "Error: Either zkverify_docker_tag or zkverify_version must be provided."
          exit 1
        else
          echo "Validation passed. Proceeding with the workflow."
        fi

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache npm dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-npm-

    - name: Remove Existing node_modules
      shell: bash
      run: rm -rf node_modules
      working-directory: src

    - name: Install npm Dependencies
      shell: bash
      run: npm ci
      working-directory: src

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.DOCKER_HUB_USERNAME }}
        password: ${{ inputs.DOCKER_HUB_TOKEN }}

    - name: Sanitize zkVerify_version
      id: sanitize_version
      if: ${{ inputs.zkverify_version != '' }}
      shell: bash
      run: |
        # Determine the source of zkverify_version
        VERSION="${{ inputs.zkverify_version }}"

        # Replace '/' with '-' and remove any other invalid characters for Docker tags
        SANITIZED_VERSION=$(echo "$VERSION" | tr '/' '-' | sed 's/[^a-zA-Z0-9_.-]/-/g')

        # Ensure the tag starts with a letter or number
        SANITIZED_VERSION=$(echo "$SANITIZED_VERSION" | sed 's/^[^a-zA-Z0-9]/0&/')

        # Truncate to 128 characters (Docker tag length limit)
        SANITIZED_VERSION="${SANITIZED_VERSION:0:128}"

        echo "SANITIZED_ZKVERIFY_VERSION=${SANITIZED_VERSION}" >> $GITHUB_ENV
        echo "Sanitized zkverify_version: $SANITIZED_VERSION"

    - name: Run Setup Script (Clone Repositories & Build zkVerify Docker Image)
      id: setup_and_build_image
      env:
        GH_TOKEN: ${{ inputs.GH_TOKEN }}
      if: ${{ inputs.zkverify_version != '' }}
      shell: bash
      run: |
        ./setup.sh --fetch-latest --rebuild \
          --zkverify-version ${{ inputs.zkverify_version }} \
          --nh-attestation-bot-branch ${{ inputs.attestation_bot_branch }} \
          --zkv-attestation-contracts-branch ${{ inputs.zkv_contracts_branch }} \
          --docker-image-tag ${{ env.SANITIZED_ZKVERIFY_VERSION }}
      working-directory: src/e2e-tests

    - name: Run Setup Script (Clone Repositories & Use existing zkVerify Docker Image)
      env:
        GH_TOKEN: ${{ inputs.GH_TOKEN }}
      if: ${{ inputs.zkverify_docker_tag != '' }}
      shell: bash
      run: |
        ./setup.sh --fetch-latest \
          --docker-image-tag ${{ inputs.zkverify_docker_tag }} \
          --nh-attestation-bot-branch ${{ inputs.attestation_bot_branch }} \
          --zkv-attestation-contracts-branch ${{ inputs.zkv_contracts_branch }}
      working-directory: src/e2e-tests

    - name: Set Up Docker Containers
      shell: bash
      run: |
        docker compose down -v
        ZKVERIFY_IMAGE_TAG=${{ env.SANITIZED_ZKVERIFY_VERSION || inputs.zkverify_docker_tag }} docker compose build --no-cache
        ZKVERIFY_IMAGE_TAG=${{ env.SANITIZED_ZKVERIFY_VERSION || inputs.zkverify_docker_tag }} docker compose up -d
      working-directory: src/e2e-tests

    - name: Wait for Ethereum contract to be deployed
      shell: bash
      run: |
        MAX_WAIT_TIME=300
        wait_time=0
        while true; do
          if docker compose exec -T anvil-node test -f /data/contract_data.txt; then
            CONTRACT_ADDRESS=$(docker compose exec -T anvil-node sh -c "sed -n '1p' /data/contract_data.txt | cut -d ' ' -f 3")
            if [ ! -z "$CONTRACT_ADDRESS" ]; then
              echo "Contract data is ready."
              echo "ZKV_CONTRACT=$CONTRACT_ADDRESS" >> $GITHUB_ENV
              break
            fi
          fi
          if [ "$wait_time" -ge "$MAX_WAIT_TIME" ]; then
            echo "Timeout reached: contract data file is not ready."
            exit 1
          fi
          echo "Waiting for contract data file to be ready..."
          sleep 3
          wait_time=$((wait_time + 3))
        done
      working-directory: src/e2e-tests

    - name: Run E2E tests
      id: run_tests
      shell: bash
      run: |
        mkdir -p reports
        npm --prefix ../../ run test:e2e 2>&1 | tee reports/test_output.txt
      working-directory: src/e2e-tests

    - name: Parse Test Results
      id: parse_test_results
      if: ${{ !cancelled() }}
      shell: bash
      run: |
        TEST_OUTPUT=$(cat reports/test_output.txt || echo "")

        # Initialize variables
        PASSED=0
        FAILED=0
        SKIPPED=0
        TOTAL=0
        SUITE_FAILED=0
        OVERALL_STATUS="failure"
        OVERALL_STATUS_EMOJI=":red_circle:"
        SLACK_MESSAGE="*Test report was not available to parse.*"

        # Check if test report is available
        if [ -s reports/test_output.txt ]; then
          # Parse suite results
          if echo "$TEST_OUTPUT" | grep -q 'Test Suites:'; then
            SUITE_FAILED=$(echo "$TEST_OUTPUT" | awk '/Test Suites:/ {for(i=1;i<=NF;i++) if($i=="failed,") print $(i-1)}')
          fi

          # Parse individual test results
          if echo "$TEST_OUTPUT" | grep -q 'Tests:'; then
            PASSED=$(echo "$TEST_OUTPUT" | awk '/Tests:/ {for(i=1;i<=NF;i++) if($i=="passed,") print $(i-1)}')
            FAILED=$(echo "$TEST_OUTPUT" | awk '/Tests:/ {for(i=1;i<=NF;i++) if($i=="failed,") print $(i-1)}')
            SKIPPED=$(echo "$TEST_OUTPUT" | awk '/Tests:/ {for(i=1;i<=NF;i++) if($i=="skipped,") print $(i-1)}')
            TOTAL=$(echo "$TEST_OUTPUT" | awk '/Tests:/ {for(i=1;i<=NF;i++) if($i=="total") print $(i-1)}')

            PASSED=${PASSED:-0}
            FAILED=${FAILED:-0}
            SKIPPED=${SKIPPED:-0}
            TOTAL=${TOTAL:-0}

            # Build the Slack message with test results
            SLACK_MESSAGE="*Test Results:*\n*Passed:* $PASSED\n*Failed:* $FAILED\n*Skipped:* $SKIPPED\n*Total:* $TOTAL"
          fi

          # Check if no tests were run
          if [ "$TOTAL" -eq 0 ]; then
            OVERALL_STATUS="failure"
            OVERALL_STATUS_EMOJI=":red_circle:"
            SLACK_MESSAGE="*No tests were executed!*"
          fi

          # If any test suite failed (captures code/import errors etc.), override the overall status to failure
          if [ "$SUITE_FAILED" -gt 0 ]; then
            OVERALL_STATUS="failure"
            OVERALL_STATUS_EMOJI=":red_circle:"
            SLACK_MESSAGE="$SLACK_MESSAGE\n*Test Suites Failed:* $SUITE_FAILED"
          elif [ "$FAILED" -eq 0 ] && [ "$TOTAL" -gt 0 ]; then
            OVERALL_STATUS="success"
            OVERALL_STATUS_EMOJI=":large_green_circle:"
          fi
        fi

        # Write environment variables to pass between workflow steps
        echo "PASSED=$PASSED" >> $GITHUB_ENV
        echo "FAILED=$FAILED" >> $GITHUB_ENV
        echo "SKIPPED=$SKIPPED" >> $GITHUB_ENV
        echo "TOTAL=$TOTAL" >> $GITHUB_ENV
        echo "SUITE_FAILED=$SUITE_FAILED" >> $GITHUB_ENV
        echo "OVERALL_STATUS=$OVERALL_STATUS" >> $GITHUB_ENV
        echo "test_status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
        echo "OVERALL_STATUS_EMOJI=$OVERALL_STATUS_EMOJI" >> $GITHUB_ENV
        echo "SLACK_MESSAGE=$SLACK_MESSAGE" >> $GITHUB_ENV

        if [ "$OVERALL_STATUS" == "failure" ]; then
          exit 1
        fi
      working-directory: src/e2e-tests

    - name: Send Slack Notification
      if: ${{ !cancelled() }}
      uses: slackapi/slack-github-action@v1.25.0
      with:
        payload: |
          {
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "${{ env.OVERALL_STATUS_EMOJI }} *zkVerify E2E TEST STATUS:* ${{ env.OVERALL_STATUS }} ${{ env.OVERALL_STATUS_EMOJI }}\n\n${{ env.SLACK_MESSAGE }}\n\n*Build URL:* <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Click here to view the build>"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ inputs.QA_SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

    - name: Cleanup Docker resources
      if: always()
      shell: bash
      run: |
        echo "Cleaning up Docker resources..."
        docker compose -f docker-compose.yml down -v
        docker container prune -f
        docker network prune -f
        docker volume prune -f
        echo "Checking disk space..."
        df -h
        echo "Listing remaining Docker resources..."
        docker ps -a
        docker network ls
        docker volume ls
        docker images
      working-directory: src/e2e-tests

volumes:
  contract-data:
  subquery-postgres-data:

services:
  anvil-node:
    platform: linux/amd64
    build:
      context: ./services
      dockerfile: anvil/Dockerfile
    volumes:
      - contract-data:/data
    ports:
      - "8545:8545"

  local_node:
    image: horizenlabs/zkverify:${ZKVERIFY_IMAGE_TAG}
    container_name: "${NODE_NAME}"
    hostname: "${NODE_NAME}"
    env_file:
      - ./services/zkVerify/docker/resources/envs/.env.local
    ports:
      - "${NODE_NET_RPC_WS_PORT}:${NODE_NET_RPC_WS_PORT}"
      - "${NODE_NET_P2P_PORT}:${NODE_NET_P2P_PORT}"
    expose:
      - "${NODE_NET_RPC_WS_PORT}"
    healthcheck:
      test:
        [
          CMD,
          curl,
          -H,
          "Content-Type: application/json",
          "-d",
          '{"jsonrpc":"2.0","method":"system_health","params":[],"id":1}',
          -f,
          "http://local_node:9944",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  node_alice:
    image: horizenlabs/zkverify:${ZKVERIFY_IMAGE_TAG}
    env_file:
      - ./services/zkVerify/docker/resources/envs/.env.alice

  node_bob:
    image: horizenlabs/zkverify:${ZKVERIFY_IMAGE_TAG}
    env_file:
      - ./services/zkVerify/docker/resources/envs/.env.bob
    volumes:
      - ./services/zkVerify/docker/resources/deploy:/data/config

  subquery-postgres:
    image: horizenlabs/zkverify-subquery-postgres:${SUBQUERY_POSTGRES_VERSION}
    container_name: subquery-postgres
    hostname: subquery-postgres
    volumes:
      - subquery-postgres-data:/var/lib/postgresql/data
    environment:
      - "POSTGRES_PASSWORD=${SUBQUERY_DB_PASS}"
    expose:
      - ${SUBQUERY_DB_PORT}
    healthcheck:
      test: [CMD-SHELL, pg_isready -U postgres]
      interval: 5s
      timeout: 5s
      retries: 5

  subquery-node:
    image: horizenlabs/zkverify-subquery-node:${SUBQUERY_NODE_VERSION}
    container_name: subquery-node
    hostname: subquery-node
    platform: linux/amd64
    depends_on:
      subquery-postgres:
        condition: service_healthy
      local_node:
        condition: service_healthy
    restart: unless-stopped
    environment:
      - "DB_USER=${SUBQUERY_DB_USER}"
      - "DB_PASS=${SUBQUERY_DB_PASS}"
      - "DB_DATABASE=${SUBQUERY_DB_DATABASE}"
      - DB_HOST=subquery-postgres
      - "DB_PORT=${SUBQUERY_DB_PORT}"
      - "SUBQUERY_NODE_STARTING_BLOCK=${SUBQUERY_NODE_STARTING_BLOCK}"
    expose:
      - ${SUBQUERY_NODE_PORT}
    volumes:
      - ./configs/attestation-bot/entrypoint.sh:/usr/local/bin/entrypoint.sh:ro
    entrypoint: [/usr/local/bin/entrypoint.sh]
    command:
      - -f=/app
      - --network-endpoint=ws://local_node:9944
      - --db-schema=app
      - --workers=${SUBQUERY_NODE_WORKERS}
      - --batch-size=${SUBQUERY_NODE_BATCH_SIZE}
      - --port=${SUBQUERY_NODE_PORT}
      - --unfinalized-blocks=false
      - --skip-transactions
      - --debug
    healthcheck:
      test: [CMD, curl, -f, "http://subquery-node:${SUBQUERY_NODE_PORT}/ready"]
      interval: 3s
      timeout: 5s
      retries: 10

  graphql-engine:
    image: subquerynetwork/subql-query:${SUBQL_QUERY_VERSION}
    container_name: graphql-engine
    hostname: graphql-engine
    depends_on:
      subquery-postgres:
        condition: service_healthy
      subquery-node:
        condition: service_healthy
    restart: always
    environment:
      - "DB_USER=${SUBQUERY_DB_USER}"
      - "DB_PASS=${SUBQUERY_DB_PASS}"
      - "DB_DATABASE=${SUBQUERY_DB_DATABASE}"
      - DB_HOST=subquery-postgres
      - "DB_PORT=${SUBQUERY_DB_PORT}"
      - "PORT=${GRAPHQL_QUERY_PORT}"
    expose:
      - ${GRAPHQL_QUERY_PORT}
    command:
      - --name=app
      - --indexer=${ZKV_ATTEST_BOT_GRAPHQL_SERVICE_URL}
    healthcheck:
      test:
        [
          CMD,
          curl,
          "http://graphql-engine:${GRAPHQL_QUERY_PORT}",
          -X,
          POST,
          --data-raw,
          '{"query":"{_metadata {chain lastProcessedHeight lastProcessedTimestamp}}"',
        ]
      interval: 3s
      timeout: 5s
      retries: 10

  attestation-bot:
    build:
      context: ./services/nh-attestation-bot/bot
      dockerfile: Dockerfile
    volumes:
      - contract-data:/data
      - ./start_bot.sh:/app/start_bot.sh
    environment:
      - "ZKV_ATTEST_BOT_GRAPHQL_SERVICE_URL=${ZKV_ATTEST_BOT_GRAPHQL_SERVICE_URL}"
      - "ZKV_ATTEST_BOT_ETH_JSON_RPC_PROVIDER_URL=${ZKV_ATTEST_BOT_ETH_JSON_RPC_PROVIDER_URL}"
    env_file:
      - .env
    ports:
      - "3000:3000"
    depends_on:
      anvil-node:
        condition: service_started
      local_node:
        condition: service_healthy
      node_alice:
        condition: service_started
      node_bob:
        condition: service_started
      graphql-engine:
        condition: service_healthy
    command: ["/bin/sh", "/app/start_bot.sh"]
